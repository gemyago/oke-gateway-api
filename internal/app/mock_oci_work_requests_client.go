// Code generated by mockery. DO NOT EDIT.

//go:build !release

package app

import (
	context "context"

	workrequests "github.com/oracle/oci-go-sdk/v65/workrequests"
	mock "github.com/stretchr/testify/mock"
)

// MockociWorkRequestsClient is an autogenerated mock type for the ociWorkRequestsClient type
type MockociWorkRequestsClient struct {
	mock.Mock
}

type MockociWorkRequestsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockociWorkRequestsClient) EXPECT() *MockociWorkRequestsClient_Expecter {
	return &MockociWorkRequestsClient_Expecter{mock: &_m.Mock}
}

// GetWorkRequest provides a mock function with given fields: ctx, request
func (_m *MockociWorkRequestsClient) GetWorkRequest(ctx context.Context, request workrequests.GetWorkRequestRequest) (workrequests.GetWorkRequestResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkRequest")
	}

	var r0 workrequests.GetWorkRequestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, workrequests.GetWorkRequestRequest) (workrequests.GetWorkRequestResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, workrequests.GetWorkRequestRequest) workrequests.GetWorkRequestResponse); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(workrequests.GetWorkRequestResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, workrequests.GetWorkRequestRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockociWorkRequestsClient_GetWorkRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkRequest'
type MockociWorkRequestsClient_GetWorkRequest_Call struct {
	*mock.Call
}

// GetWorkRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - request workrequests.GetWorkRequestRequest
func (_e *MockociWorkRequestsClient_Expecter) GetWorkRequest(ctx interface{}, request interface{}) *MockociWorkRequestsClient_GetWorkRequest_Call {
	return &MockociWorkRequestsClient_GetWorkRequest_Call{Call: _e.mock.On("GetWorkRequest", ctx, request)}
}

func (_c *MockociWorkRequestsClient_GetWorkRequest_Call) Run(run func(ctx context.Context, request workrequests.GetWorkRequestRequest)) *MockociWorkRequestsClient_GetWorkRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(workrequests.GetWorkRequestRequest))
	})
	return _c
}

func (_c *MockociWorkRequestsClient_GetWorkRequest_Call) Return(_a0 workrequests.GetWorkRequestResponse, _a1 error) *MockociWorkRequestsClient_GetWorkRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockociWorkRequestsClient_GetWorkRequest_Call) RunAndReturn(run func(context.Context, workrequests.GetWorkRequestRequest) (workrequests.GetWorkRequestResponse, error)) *MockociWorkRequestsClient_GetWorkRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockociWorkRequestsClient creates a new instance of MockociWorkRequestsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockociWorkRequestsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockociWorkRequestsClient {
	mock := &MockociWorkRequestsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
