// Code generated by mockery. DO NOT EDIT.

//go:build !release

package app

import (
	context "context"

	client "sigs.k8s.io/controller-runtime/pkg/client"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MockresourcesModel is an autogenerated mock type for the resourcesModel type
type MockresourcesModel struct {
	mock.Mock
}

type MockresourcesModel_Expecter struct {
	mock *mock.Mock
}

func (_m *MockresourcesModel) EXPECT() *MockresourcesModel_Expecter {
	return &MockresourcesModel_Expecter{mock: &_m.Mock}
}

// isConditionSet provides a mock function with given fields: resource, conditions, conditionType
func (_m *MockresourcesModel) isConditionSet(resource client.Object, conditions []v1.Condition, conditionType string) bool {
	ret := _m.Called(resource, conditions, conditionType)

	if len(ret) == 0 {
		panic("no return value specified for isConditionSet")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(client.Object, []v1.Condition, string) bool); ok {
		r0 = rf(resource, conditions, conditionType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockresourcesModel_isConditionSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'isConditionSet'
type MockresourcesModel_isConditionSet_Call struct {
	*mock.Call
}

// isConditionSet is a helper method to define mock.On call
//   - resource client.Object
//   - conditions []v1.Condition
//   - conditionType string
func (_e *MockresourcesModel_Expecter) isConditionSet(resource interface{}, conditions interface{}, conditionType interface{}) *MockresourcesModel_isConditionSet_Call {
	return &MockresourcesModel_isConditionSet_Call{Call: _e.mock.On("isConditionSet", resource, conditions, conditionType)}
}

func (_c *MockresourcesModel_isConditionSet_Call) Run(run func(resource client.Object, conditions []v1.Condition, conditionType string)) *MockresourcesModel_isConditionSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.Object), args[1].([]v1.Condition), args[2].(string))
	})
	return _c
}

func (_c *MockresourcesModel_isConditionSet_Call) Return(_a0 bool) *MockresourcesModel_isConditionSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockresourcesModel_isConditionSet_Call) RunAndReturn(run func(client.Object, []v1.Condition, string) bool) *MockresourcesModel_isConditionSet_Call {
	_c.Call.Return(run)
	return _c
}

// setAcceptedCondition provides a mock function with given fields: ctx, params
func (_m *MockresourcesModel) setAcceptedCondition(ctx context.Context, params setAcceptedConditionParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for setAcceptedCondition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, setAcceptedConditionParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockresourcesModel_setAcceptedCondition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setAcceptedCondition'
type MockresourcesModel_setAcceptedCondition_Call struct {
	*mock.Call
}

// setAcceptedCondition is a helper method to define mock.On call
//   - ctx context.Context
//   - params setAcceptedConditionParams
func (_e *MockresourcesModel_Expecter) setAcceptedCondition(ctx interface{}, params interface{}) *MockresourcesModel_setAcceptedCondition_Call {
	return &MockresourcesModel_setAcceptedCondition_Call{Call: _e.mock.On("setAcceptedCondition", ctx, params)}
}

func (_c *MockresourcesModel_setAcceptedCondition_Call) Run(run func(ctx context.Context, params setAcceptedConditionParams)) *MockresourcesModel_setAcceptedCondition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(setAcceptedConditionParams))
	})
	return _c
}

func (_c *MockresourcesModel_setAcceptedCondition_Call) Return(_a0 error) *MockresourcesModel_setAcceptedCondition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockresourcesModel_setAcceptedCondition_Call) RunAndReturn(run func(context.Context, setAcceptedConditionParams) error) *MockresourcesModel_setAcceptedCondition_Call {
	_c.Call.Return(run)
	return _c
}

// setNotAcceptedCondition provides a mock function with given fields: ctx, params
func (_m *MockresourcesModel) setNotAcceptedCondition(ctx context.Context, params setNotAcceptedConditionParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for setNotAcceptedCondition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, setNotAcceptedConditionParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockresourcesModel_setNotAcceptedCondition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'setNotAcceptedCondition'
type MockresourcesModel_setNotAcceptedCondition_Call struct {
	*mock.Call
}

// setNotAcceptedCondition is a helper method to define mock.On call
//   - ctx context.Context
//   - params setNotAcceptedConditionParams
func (_e *MockresourcesModel_Expecter) setNotAcceptedCondition(ctx interface{}, params interface{}) *MockresourcesModel_setNotAcceptedCondition_Call {
	return &MockresourcesModel_setNotAcceptedCondition_Call{Call: _e.mock.On("setNotAcceptedCondition", ctx, params)}
}

func (_c *MockresourcesModel_setNotAcceptedCondition_Call) Run(run func(ctx context.Context, params setNotAcceptedConditionParams)) *MockresourcesModel_setNotAcceptedCondition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(setNotAcceptedConditionParams))
	})
	return _c
}

func (_c *MockresourcesModel_setNotAcceptedCondition_Call) Return(_a0 error) *MockresourcesModel_setNotAcceptedCondition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockresourcesModel_setNotAcceptedCondition_Call) RunAndReturn(run func(context.Context, setNotAcceptedConditionParams) error) *MockresourcesModel_setNotAcceptedCondition_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockresourcesModel creates a new instance of MockresourcesModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockresourcesModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockresourcesModel {
	mock := &MockresourcesModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
