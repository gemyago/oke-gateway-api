// Code generated by mockery. DO NOT EDIT.

//go:build !release

package app

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockhttpBackendModel is an autogenerated mock type for the httpBackendModel type
type MockhttpBackendModel struct {
	mock.Mock
}

type MockhttpBackendModel_Expecter struct {
	mock *mock.Mock
}

func (_m *MockhttpBackendModel) EXPECT() *MockhttpBackendModel_Expecter {
	return &MockhttpBackendModel_Expecter{mock: &_m.Mock}
}

// syncRouteBackendEndpoints provides a mock function with given fields: ctx, params
func (_m *MockhttpBackendModel) syncRouteBackendEndpoints(ctx context.Context, params syncRouteBackendEndpointsParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for syncRouteBackendEndpoints")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, syncRouteBackendEndpointsParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockhttpBackendModel_syncRouteBackendEndpoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'syncRouteBackendEndpoints'
type MockhttpBackendModel_syncRouteBackendEndpoints_Call struct {
	*mock.Call
}

// syncRouteBackendEndpoints is a helper method to define mock.On call
//   - ctx context.Context
//   - params syncRouteBackendEndpointsParams
func (_e *MockhttpBackendModel_Expecter) syncRouteBackendEndpoints(ctx interface{}, params interface{}) *MockhttpBackendModel_syncRouteBackendEndpoints_Call {
	return &MockhttpBackendModel_syncRouteBackendEndpoints_Call{Call: _e.mock.On("syncRouteBackendEndpoints", ctx, params)}
}

func (_c *MockhttpBackendModel_syncRouteBackendEndpoints_Call) Run(run func(ctx context.Context, params syncRouteBackendEndpointsParams)) *MockhttpBackendModel_syncRouteBackendEndpoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(syncRouteBackendEndpointsParams))
	})
	return _c
}

func (_c *MockhttpBackendModel_syncRouteBackendEndpoints_Call) Return(_a0 error) *MockhttpBackendModel_syncRouteBackendEndpoints_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockhttpBackendModel_syncRouteBackendEndpoints_Call) RunAndReturn(run func(context.Context, syncRouteBackendEndpointsParams) error) *MockhttpBackendModel_syncRouteBackendEndpoints_Call {
	_c.Call.Return(run)
	return _c
}

// syncRouteBackendRuleEndpoints provides a mock function with given fields: ctx, params
func (_m *MockhttpBackendModel) syncRouteBackendRuleEndpoints(ctx context.Context, params syncRouteBackendRuleEndpointsParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for syncRouteBackendRuleEndpoints")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, syncRouteBackendRuleEndpointsParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockhttpBackendModel_syncRouteBackendRuleEndpoints_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'syncRouteBackendRuleEndpoints'
type MockhttpBackendModel_syncRouteBackendRuleEndpoints_Call struct {
	*mock.Call
}

// syncRouteBackendRuleEndpoints is a helper method to define mock.On call
//   - ctx context.Context
//   - params syncRouteBackendRuleEndpointsParams
func (_e *MockhttpBackendModel_Expecter) syncRouteBackendRuleEndpoints(ctx interface{}, params interface{}) *MockhttpBackendModel_syncRouteBackendRuleEndpoints_Call {
	return &MockhttpBackendModel_syncRouteBackendRuleEndpoints_Call{Call: _e.mock.On("syncRouteBackendRuleEndpoints", ctx, params)}
}

func (_c *MockhttpBackendModel_syncRouteBackendRuleEndpoints_Call) Run(run func(ctx context.Context, params syncRouteBackendRuleEndpointsParams)) *MockhttpBackendModel_syncRouteBackendRuleEndpoints_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(syncRouteBackendRuleEndpointsParams))
	})
	return _c
}

func (_c *MockhttpBackendModel_syncRouteBackendRuleEndpoints_Call) Return(_a0 error) *MockhttpBackendModel_syncRouteBackendRuleEndpoints_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockhttpBackendModel_syncRouteBackendRuleEndpoints_Call) RunAndReturn(run func(context.Context, syncRouteBackendRuleEndpointsParams) error) *MockhttpBackendModel_syncRouteBackendRuleEndpoints_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockhttpBackendModel creates a new instance of MockhttpBackendModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockhttpBackendModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockhttpBackendModel {
	mock := &MockhttpBackendModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
