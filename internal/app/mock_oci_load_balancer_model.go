// Code generated by mockery. DO NOT EDIT.

//go:build !release

package app

import (
	context "context"

	loadbalancer "github.com/oracle/oci-go-sdk/v65/loadbalancer"
	mock "github.com/stretchr/testify/mock"
)

// MockociLoadBalancerModel is an autogenerated mock type for the ociLoadBalancerModel type
type MockociLoadBalancerModel struct {
	mock.Mock
}

type MockociLoadBalancerModel_Expecter struct {
	mock *mock.Mock
}

func (_m *MockociLoadBalancerModel) EXPECT() *MockociLoadBalancerModel_Expecter {
	return &MockociLoadBalancerModel_Expecter{mock: &_m.Mock}
}

// appendRoutingRule provides a mock function with given fields: ctx, params
func (_m *MockociLoadBalancerModel) appendRoutingRule(ctx context.Context, params appendRoutingRuleParams) ([]loadbalancer.RoutingRule, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for appendRoutingRule")
	}

	var r0 []loadbalancer.RoutingRule
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, appendRoutingRuleParams) ([]loadbalancer.RoutingRule, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, appendRoutingRuleParams) []loadbalancer.RoutingRule); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]loadbalancer.RoutingRule)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, appendRoutingRuleParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockociLoadBalancerModel_appendRoutingRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'appendRoutingRule'
type MockociLoadBalancerModel_appendRoutingRule_Call struct {
	*mock.Call
}

// appendRoutingRule is a helper method to define mock.On call
//   - ctx context.Context
//   - params appendRoutingRuleParams
func (_e *MockociLoadBalancerModel_Expecter) appendRoutingRule(ctx interface{}, params interface{}) *MockociLoadBalancerModel_appendRoutingRule_Call {
	return &MockociLoadBalancerModel_appendRoutingRule_Call{Call: _e.mock.On("appendRoutingRule", ctx, params)}
}

func (_c *MockociLoadBalancerModel_appendRoutingRule_Call) Run(run func(ctx context.Context, params appendRoutingRuleParams)) *MockociLoadBalancerModel_appendRoutingRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(appendRoutingRuleParams))
	})
	return _c
}

func (_c *MockociLoadBalancerModel_appendRoutingRule_Call) Return(_a0 []loadbalancer.RoutingRule, _a1 error) *MockociLoadBalancerModel_appendRoutingRule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockociLoadBalancerModel_appendRoutingRule_Call) RunAndReturn(run func(context.Context, appendRoutingRuleParams) ([]loadbalancer.RoutingRule, error)) *MockociLoadBalancerModel_appendRoutingRule_Call {
	_c.Call.Return(run)
	return _c
}

// commitRoutingPolicies provides a mock function with given fields: ctx, params
func (_m *MockociLoadBalancerModel) commitRoutingPolicies(ctx context.Context, params commitRoutingPoliciesParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for commitRoutingPolicies")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commitRoutingPoliciesParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockociLoadBalancerModel_commitRoutingPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'commitRoutingPolicies'
type MockociLoadBalancerModel_commitRoutingPolicies_Call struct {
	*mock.Call
}

// commitRoutingPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - params commitRoutingPoliciesParams
func (_e *MockociLoadBalancerModel_Expecter) commitRoutingPolicies(ctx interface{}, params interface{}) *MockociLoadBalancerModel_commitRoutingPolicies_Call {
	return &MockociLoadBalancerModel_commitRoutingPolicies_Call{Call: _e.mock.On("commitRoutingPolicies", ctx, params)}
}

func (_c *MockociLoadBalancerModel_commitRoutingPolicies_Call) Run(run func(ctx context.Context, params commitRoutingPoliciesParams)) *MockociLoadBalancerModel_commitRoutingPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(commitRoutingPoliciesParams))
	})
	return _c
}

func (_c *MockociLoadBalancerModel_commitRoutingPolicies_Call) Return(_a0 error) *MockociLoadBalancerModel_commitRoutingPolicies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockociLoadBalancerModel_commitRoutingPolicies_Call) RunAndReturn(run func(context.Context, commitRoutingPoliciesParams) error) *MockociLoadBalancerModel_commitRoutingPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// commitRoutingPolicy provides a mock function with given fields: ctx, params
func (_m *MockociLoadBalancerModel) commitRoutingPolicy(ctx context.Context, params commitRoutingPolicyParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for commitRoutingPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, commitRoutingPolicyParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockociLoadBalancerModel_commitRoutingPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'commitRoutingPolicy'
type MockociLoadBalancerModel_commitRoutingPolicy_Call struct {
	*mock.Call
}

// commitRoutingPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - params commitRoutingPolicyParams
func (_e *MockociLoadBalancerModel_Expecter) commitRoutingPolicy(ctx interface{}, params interface{}) *MockociLoadBalancerModel_commitRoutingPolicy_Call {
	return &MockociLoadBalancerModel_commitRoutingPolicy_Call{Call: _e.mock.On("commitRoutingPolicy", ctx, params)}
}

func (_c *MockociLoadBalancerModel_commitRoutingPolicy_Call) Run(run func(ctx context.Context, params commitRoutingPolicyParams)) *MockociLoadBalancerModel_commitRoutingPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(commitRoutingPolicyParams))
	})
	return _c
}

func (_c *MockociLoadBalancerModel_commitRoutingPolicy_Call) Return(_a0 error) *MockociLoadBalancerModel_commitRoutingPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockociLoadBalancerModel_commitRoutingPolicy_Call) RunAndReturn(run func(context.Context, commitRoutingPolicyParams) error) *MockociLoadBalancerModel_commitRoutingPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// reconcileBackendSet provides a mock function with given fields: ctx, params
func (_m *MockociLoadBalancerModel) reconcileBackendSet(ctx context.Context, params reconcileBackendSetParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for reconcileBackendSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, reconcileBackendSetParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockociLoadBalancerModel_reconcileBackendSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'reconcileBackendSet'
type MockociLoadBalancerModel_reconcileBackendSet_Call struct {
	*mock.Call
}

// reconcileBackendSet is a helper method to define mock.On call
//   - ctx context.Context
//   - params reconcileBackendSetParams
func (_e *MockociLoadBalancerModel_Expecter) reconcileBackendSet(ctx interface{}, params interface{}) *MockociLoadBalancerModel_reconcileBackendSet_Call {
	return &MockociLoadBalancerModel_reconcileBackendSet_Call{Call: _e.mock.On("reconcileBackendSet", ctx, params)}
}

func (_c *MockociLoadBalancerModel_reconcileBackendSet_Call) Run(run func(ctx context.Context, params reconcileBackendSetParams)) *MockociLoadBalancerModel_reconcileBackendSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(reconcileBackendSetParams))
	})
	return _c
}

func (_c *MockociLoadBalancerModel_reconcileBackendSet_Call) Return(_a0 error) *MockociLoadBalancerModel_reconcileBackendSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockociLoadBalancerModel_reconcileBackendSet_Call) RunAndReturn(run func(context.Context, reconcileBackendSetParams) error) *MockociLoadBalancerModel_reconcileBackendSet_Call {
	_c.Call.Return(run)
	return _c
}

// reconcileDefaultBackendSet provides a mock function with given fields: ctx, params
func (_m *MockociLoadBalancerModel) reconcileDefaultBackendSet(ctx context.Context, params reconcileDefaultBackendParams) (loadbalancer.BackendSet, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for reconcileDefaultBackendSet")
	}

	var r0 loadbalancer.BackendSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, reconcileDefaultBackendParams) (loadbalancer.BackendSet, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, reconcileDefaultBackendParams) loadbalancer.BackendSet); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(loadbalancer.BackendSet)
	}

	if rf, ok := ret.Get(1).(func(context.Context, reconcileDefaultBackendParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockociLoadBalancerModel_reconcileDefaultBackendSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'reconcileDefaultBackendSet'
type MockociLoadBalancerModel_reconcileDefaultBackendSet_Call struct {
	*mock.Call
}

// reconcileDefaultBackendSet is a helper method to define mock.On call
//   - ctx context.Context
//   - params reconcileDefaultBackendParams
func (_e *MockociLoadBalancerModel_Expecter) reconcileDefaultBackendSet(ctx interface{}, params interface{}) *MockociLoadBalancerModel_reconcileDefaultBackendSet_Call {
	return &MockociLoadBalancerModel_reconcileDefaultBackendSet_Call{Call: _e.mock.On("reconcileDefaultBackendSet", ctx, params)}
}

func (_c *MockociLoadBalancerModel_reconcileDefaultBackendSet_Call) Run(run func(ctx context.Context, params reconcileDefaultBackendParams)) *MockociLoadBalancerModel_reconcileDefaultBackendSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(reconcileDefaultBackendParams))
	})
	return _c
}

func (_c *MockociLoadBalancerModel_reconcileDefaultBackendSet_Call) Return(_a0 loadbalancer.BackendSet, _a1 error) *MockociLoadBalancerModel_reconcileDefaultBackendSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockociLoadBalancerModel_reconcileDefaultBackendSet_Call) RunAndReturn(run func(context.Context, reconcileDefaultBackendParams) (loadbalancer.BackendSet, error)) *MockociLoadBalancerModel_reconcileDefaultBackendSet_Call {
	_c.Call.Return(run)
	return _c
}

// reconcileHTTPListener provides a mock function with given fields: ctx, params
func (_m *MockociLoadBalancerModel) reconcileHTTPListener(ctx context.Context, params reconcileHTTPListenerParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for reconcileHTTPListener")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, reconcileHTTPListenerParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockociLoadBalancerModel_reconcileHTTPListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'reconcileHTTPListener'
type MockociLoadBalancerModel_reconcileHTTPListener_Call struct {
	*mock.Call
}

// reconcileHTTPListener is a helper method to define mock.On call
//   - ctx context.Context
//   - params reconcileHTTPListenerParams
func (_e *MockociLoadBalancerModel_Expecter) reconcileHTTPListener(ctx interface{}, params interface{}) *MockociLoadBalancerModel_reconcileHTTPListener_Call {
	return &MockociLoadBalancerModel_reconcileHTTPListener_Call{Call: _e.mock.On("reconcileHTTPListener", ctx, params)}
}

func (_c *MockociLoadBalancerModel_reconcileHTTPListener_Call) Run(run func(ctx context.Context, params reconcileHTTPListenerParams)) *MockociLoadBalancerModel_reconcileHTTPListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(reconcileHTTPListenerParams))
	})
	return _c
}

func (_c *MockociLoadBalancerModel_reconcileHTTPListener_Call) Return(_a0 error) *MockociLoadBalancerModel_reconcileHTTPListener_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockociLoadBalancerModel_reconcileHTTPListener_Call) RunAndReturn(run func(context.Context, reconcileHTTPListenerParams) error) *MockociLoadBalancerModel_reconcileHTTPListener_Call {
	_c.Call.Return(run)
	return _c
}

// removeMissingListeners provides a mock function with given fields: ctx, params
func (_m *MockociLoadBalancerModel) removeMissingListeners(ctx context.Context, params removeMissingListenersParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for removeMissingListeners")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, removeMissingListenersParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockociLoadBalancerModel_removeMissingListeners_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'removeMissingListeners'
type MockociLoadBalancerModel_removeMissingListeners_Call struct {
	*mock.Call
}

// removeMissingListeners is a helper method to define mock.On call
//   - ctx context.Context
//   - params removeMissingListenersParams
func (_e *MockociLoadBalancerModel_Expecter) removeMissingListeners(ctx interface{}, params interface{}) *MockociLoadBalancerModel_removeMissingListeners_Call {
	return &MockociLoadBalancerModel_removeMissingListeners_Call{Call: _e.mock.On("removeMissingListeners", ctx, params)}
}

func (_c *MockociLoadBalancerModel_removeMissingListeners_Call) Run(run func(ctx context.Context, params removeMissingListenersParams)) *MockociLoadBalancerModel_removeMissingListeners_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(removeMissingListenersParams))
	})
	return _c
}

func (_c *MockociLoadBalancerModel_removeMissingListeners_Call) Return(_a0 error) *MockociLoadBalancerModel_removeMissingListeners_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockociLoadBalancerModel_removeMissingListeners_Call) RunAndReturn(run func(context.Context, removeMissingListenersParams) error) *MockociLoadBalancerModel_removeMissingListeners_Call {
	_c.Call.Return(run)
	return _c
}

// resolveAndTidyRoutingPolicy provides a mock function with given fields: ctx, params
func (_m *MockociLoadBalancerModel) resolveAndTidyRoutingPolicy(ctx context.Context, params resolveAndTidyRoutingPolicyParams) (loadbalancer.RoutingPolicy, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for resolveAndTidyRoutingPolicy")
	}

	var r0 loadbalancer.RoutingPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, resolveAndTidyRoutingPolicyParams) (loadbalancer.RoutingPolicy, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, resolveAndTidyRoutingPolicyParams) loadbalancer.RoutingPolicy); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(loadbalancer.RoutingPolicy)
	}

	if rf, ok := ret.Get(1).(func(context.Context, resolveAndTidyRoutingPolicyParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockociLoadBalancerModel_resolveAndTidyRoutingPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'resolveAndTidyRoutingPolicy'
type MockociLoadBalancerModel_resolveAndTidyRoutingPolicy_Call struct {
	*mock.Call
}

// resolveAndTidyRoutingPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - params resolveAndTidyRoutingPolicyParams
func (_e *MockociLoadBalancerModel_Expecter) resolveAndTidyRoutingPolicy(ctx interface{}, params interface{}) *MockociLoadBalancerModel_resolveAndTidyRoutingPolicy_Call {
	return &MockociLoadBalancerModel_resolveAndTidyRoutingPolicy_Call{Call: _e.mock.On("resolveAndTidyRoutingPolicy", ctx, params)}
}

func (_c *MockociLoadBalancerModel_resolveAndTidyRoutingPolicy_Call) Run(run func(ctx context.Context, params resolveAndTidyRoutingPolicyParams)) *MockociLoadBalancerModel_resolveAndTidyRoutingPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(resolveAndTidyRoutingPolicyParams))
	})
	return _c
}

func (_c *MockociLoadBalancerModel_resolveAndTidyRoutingPolicy_Call) Return(_a0 loadbalancer.RoutingPolicy, _a1 error) *MockociLoadBalancerModel_resolveAndTidyRoutingPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockociLoadBalancerModel_resolveAndTidyRoutingPolicy_Call) RunAndReturn(run func(context.Context, resolveAndTidyRoutingPolicyParams) (loadbalancer.RoutingPolicy, error)) *MockociLoadBalancerModel_resolveAndTidyRoutingPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockociLoadBalancerModel creates a new instance of MockociLoadBalancerModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockociLoadBalancerModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockociLoadBalancerModel {
	mock := &MockociLoadBalancerModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
