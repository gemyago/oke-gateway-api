// Code generated by mockery. DO NOT EDIT.

//go:build !release

package app

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	reconcile "sigs.k8s.io/controller-runtime/pkg/reconcile"
)

// MockhttpRouteModel is an autogenerated mock type for the httpRouteModel type
type MockhttpRouteModel struct {
	mock.Mock
}

type MockhttpRouteModel_Expecter struct {
	mock *mock.Mock
}

func (_m *MockhttpRouteModel) EXPECT() *MockhttpRouteModel_Expecter {
	return &MockhttpRouteModel_Expecter{mock: &_m.Mock}
}

// acceptRoute provides a mock function with given fields: ctx, routeDetails
func (_m *MockhttpRouteModel) acceptRoute(ctx context.Context, routeDetails *resolvedRouteDetails) error {
	ret := _m.Called(ctx, routeDetails)

	if len(ret) == 0 {
		panic("no return value specified for acceptRoute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *resolvedRouteDetails) error); ok {
		r0 = rf(ctx, routeDetails)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockhttpRouteModel_acceptRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'acceptRoute'
type MockhttpRouteModel_acceptRoute_Call struct {
	*mock.Call
}

// acceptRoute is a helper method to define mock.On call
//   - ctx context.Context
//   - routeDetails *resolvedRouteDetails
func (_e *MockhttpRouteModel_Expecter) acceptRoute(ctx interface{}, routeDetails interface{}) *MockhttpRouteModel_acceptRoute_Call {
	return &MockhttpRouteModel_acceptRoute_Call{Call: _e.mock.On("acceptRoute", ctx, routeDetails)}
}

func (_c *MockhttpRouteModel_acceptRoute_Call) Run(run func(ctx context.Context, routeDetails *resolvedRouteDetails)) *MockhttpRouteModel_acceptRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*resolvedRouteDetails))
	})
	return _c
}

func (_c *MockhttpRouteModel_acceptRoute_Call) Return(_a0 error) *MockhttpRouteModel_acceptRoute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockhttpRouteModel_acceptRoute_Call) RunAndReturn(run func(context.Context, *resolvedRouteDetails) error) *MockhttpRouteModel_acceptRoute_Call {
	_c.Call.Return(run)
	return _c
}

// resolveRequest provides a mock function with given fields: ctx, req, receiver
func (_m *MockhttpRouteModel) resolveRequest(ctx context.Context, req reconcile.Request, receiver *resolvedRouteDetails) (bool, error) {
	ret := _m.Called(ctx, req, receiver)

	if len(ret) == 0 {
		panic("no return value specified for resolveRequest")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, reconcile.Request, *resolvedRouteDetails) (bool, error)); ok {
		return rf(ctx, req, receiver)
	}
	if rf, ok := ret.Get(0).(func(context.Context, reconcile.Request, *resolvedRouteDetails) bool); ok {
		r0 = rf(ctx, req, receiver)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, reconcile.Request, *resolvedRouteDetails) error); ok {
		r1 = rf(ctx, req, receiver)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockhttpRouteModel_resolveRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'resolveRequest'
type MockhttpRouteModel_resolveRequest_Call struct {
	*mock.Call
}

// resolveRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - req reconcile.Request
//   - receiver *resolvedRouteDetails
func (_e *MockhttpRouteModel_Expecter) resolveRequest(ctx interface{}, req interface{}, receiver interface{}) *MockhttpRouteModel_resolveRequest_Call {
	return &MockhttpRouteModel_resolveRequest_Call{Call: _e.mock.On("resolveRequest", ctx, req, receiver)}
}

func (_c *MockhttpRouteModel_resolveRequest_Call) Run(run func(ctx context.Context, req reconcile.Request, receiver *resolvedRouteDetails)) *MockhttpRouteModel_resolveRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(reconcile.Request), args[2].(*resolvedRouteDetails))
	})
	return _c
}

func (_c *MockhttpRouteModel_resolveRequest_Call) Return(_a0 bool, _a1 error) *MockhttpRouteModel_resolveRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockhttpRouteModel_resolveRequest_Call) RunAndReturn(run func(context.Context, reconcile.Request, *resolvedRouteDetails) (bool, error)) *MockhttpRouteModel_resolveRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockhttpRouteModel creates a new instance of MockhttpRouteModel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockhttpRouteModel(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockhttpRouteModel {
	mock := &MockhttpRouteModel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
