// Code generated by mockery. DO NOT EDIT.

//go:build !release

package app

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockworkRequestsWatcher is an autogenerated mock type for the workRequestsWatcher type
type MockworkRequestsWatcher struct {
	mock.Mock
}

type MockworkRequestsWatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockworkRequestsWatcher) EXPECT() *MockworkRequestsWatcher_Expecter {
	return &MockworkRequestsWatcher_Expecter{mock: &_m.Mock}
}

// WaitFor provides a mock function with given fields: ctx, workRequestID
func (_m *MockworkRequestsWatcher) WaitFor(ctx context.Context, workRequestID string) error {
	ret := _m.Called(ctx, workRequestID)

	if len(ret) == 0 {
		panic("no return value specified for WaitFor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, workRequestID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockworkRequestsWatcher_WaitFor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitFor'
type MockworkRequestsWatcher_WaitFor_Call struct {
	*mock.Call
}

// WaitFor is a helper method to define mock.On call
//   - ctx context.Context
//   - workRequestID string
func (_e *MockworkRequestsWatcher_Expecter) WaitFor(ctx interface{}, workRequestID interface{}) *MockworkRequestsWatcher_WaitFor_Call {
	return &MockworkRequestsWatcher_WaitFor_Call{Call: _e.mock.On("WaitFor", ctx, workRequestID)}
}

func (_c *MockworkRequestsWatcher_WaitFor_Call) Run(run func(ctx context.Context, workRequestID string)) *MockworkRequestsWatcher_WaitFor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockworkRequestsWatcher_WaitFor_Call) Return(_a0 error) *MockworkRequestsWatcher_WaitFor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockworkRequestsWatcher_WaitFor_Call) RunAndReturn(run func(context.Context, string) error) *MockworkRequestsWatcher_WaitFor_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockworkRequestsWatcher creates a new instance of MockworkRequestsWatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockworkRequestsWatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockworkRequestsWatcher {
	mock := &MockworkRequestsWatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
