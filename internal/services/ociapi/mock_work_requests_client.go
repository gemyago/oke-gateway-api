// Code generated by mockery. DO NOT EDIT.

//go:build !release

package ociapi

import (
	context "context"

	loadbalancer "github.com/oracle/oci-go-sdk/v65/loadbalancer"
	mock "github.com/stretchr/testify/mock"
)

// MockworkRequestsClient is an autogenerated mock type for the workRequestsClient type
type MockworkRequestsClient struct {
	mock.Mock
}

type MockworkRequestsClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockworkRequestsClient) EXPECT() *MockworkRequestsClient_Expecter {
	return &MockworkRequestsClient_Expecter{mock: &_m.Mock}
}

// GetWorkRequest provides a mock function with given fields: ctx, request
func (_m *MockworkRequestsClient) GetWorkRequest(ctx context.Context, request loadbalancer.GetWorkRequestRequest) (loadbalancer.GetWorkRequestResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkRequest")
	}

	var r0 loadbalancer.GetWorkRequestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, loadbalancer.GetWorkRequestRequest) (loadbalancer.GetWorkRequestResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, loadbalancer.GetWorkRequestRequest) loadbalancer.GetWorkRequestResponse); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(loadbalancer.GetWorkRequestResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, loadbalancer.GetWorkRequestRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockworkRequestsClient_GetWorkRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkRequest'
type MockworkRequestsClient_GetWorkRequest_Call struct {
	*mock.Call
}

// GetWorkRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - request loadbalancer.GetWorkRequestRequest
func (_e *MockworkRequestsClient_Expecter) GetWorkRequest(ctx interface{}, request interface{}) *MockworkRequestsClient_GetWorkRequest_Call {
	return &MockworkRequestsClient_GetWorkRequest_Call{Call: _e.mock.On("GetWorkRequest", ctx, request)}
}

func (_c *MockworkRequestsClient_GetWorkRequest_Call) Run(run func(ctx context.Context, request loadbalancer.GetWorkRequestRequest)) *MockworkRequestsClient_GetWorkRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(loadbalancer.GetWorkRequestRequest))
	})
	return _c
}

func (_c *MockworkRequestsClient_GetWorkRequest_Call) Return(_a0 loadbalancer.GetWorkRequestResponse, _a1 error) *MockworkRequestsClient_GetWorkRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockworkRequestsClient_GetWorkRequest_Call) RunAndReturn(run func(context.Context, loadbalancer.GetWorkRequestRequest) (loadbalancer.GetWorkRequestResponse, error)) *MockworkRequestsClient_GetWorkRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockworkRequestsClient creates a new instance of MockworkRequestsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockworkRequestsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockworkRequestsClient {
	mock := &MockworkRequestsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
